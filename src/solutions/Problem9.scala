package solutions

/**
 * original problem: https://projecteuler.net/problem=9
 */
object Problem9 {
	/**
	 * A Pythagorean triplet can be generated by two integers m, n, where m > n > 0.
	 * Try all possible m, n, return the result when find it.
	 * 12/19/2019
	 * @param sum The sum of a Pythagorean triplet.
	 * @return
	 */
	def problem9(sum: Int = 1000): Int = {
		for (i <- 1 to sum) {
			for (j <- 1 until i) {
				if (pythagoreanTriplet(i, j).sum == sum)
					return pythagoreanTriplet(i, j).product
			}
		}

		-1
	}

	/**
	 * A Pythagorean triplet can be generated by two integers m, n, where m > n > 0.
	 * a = m^2 - n^2
	 * b = 2mn
	 * c = m^2 + n^2
	 * @param m The greater integer.
	 * @param n The smaller integer.
	 * @return A Pythagorean triplet generated by m, n.
	 */
	def pythagoreanTriplet(m: Int, n: Int): List[Int] =
		List(m*m - n*n, 2 * m*n, m*m + n*n)

	def main(args: Array[String]): Unit = {
		println(problem9())
	}
}
